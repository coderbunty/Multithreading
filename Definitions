A program is a set of instructions and associated data that resides on the disk and is loaded by the operating system to perform some task.
An executable file or a python script file are examples of programs. In order to run a program, the operating system's kernel is first asked
to create a new process, which is an environment in which a program executes.

A process is a program in execution. A process is an execution environment that consists of instructions, user-data, and system-data segments,
as well as lots of other resources such as CPU, memory, address-space, disk and network I/O acquired at runtime. A program can have several copies
of it running at the same time but a process necessarily belongs to only one program.

Thread is the smallest unit of execution in a process. A thread simply executes instructions serially. A process can have multiple threads running
as part of it. Usually, there would be some state associated with the process that is shared among all the threads and in turn each thread would have
some state private to itself. The globally shared state amongst the threads of a process is visible and accessible to all the threads, and special
attention needs to be paid when any thread tries to read or write to this global shared state. There are several constructs offered by various programming
languages to guard and discipline the access to this global state, which we will go into further detail in upcoming lessons.

Processes don't share any resources amongst themselves whereas threads of a process can share the resources allocated to that particular process,
including memory address space.

Concurrency v/s parallelism

The classic example of a concurrent system is that of an operating system running on a single core machine, running 2 or more processes at a time.
Such an operating system is concurrent but not parallel.

A parallel system is one which necessarily has the ability to execute multiple programs at the same time. Parallelism comes with 2 or more cores or procecssors.

A concurrent system need not be parallel, whereas a parallel system is indeed concurrent. Additionally, a system can be both concurrent and parallel.
e.g. a multitasking operating system running on a multicore machine.

Concurrency is about dealing with lots of things at once. Parallelism is about doing lots of things at once.

Last but not the least, you'll find literature describing concurrency as a property of a program or a system whereas parallelism as a runtime behaviour
of executing multiple tasks.

Resources:
https://stackoverflow.com/questions/38733670/can-a-single-process-run-in-multiple-cores